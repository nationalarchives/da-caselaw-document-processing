---
name: ECR image build, scan, tag, push and deploy to lambda (Reusable)
permissions:
  id-token: write
  contents: read
on:
  workflow_call:
    inputs:
      image_tag:
        description: Image tag
        type: string
        required: true
      ref:
        description: GitHub branch or ref
        type: string
        required: true
      environment:
        description: Which environment to deploy
        type: string
        required: true
      aws_region:
        description: AWS region
        type: string
        required: true
      dockerfile_directory:
        description: Path to the Dockerfile directory
        type: string
        required: false
        default: "/"
      lambda_function_name:
        description: Name of the Lambda Function
        type: string
        required: false
    secrets:
      WIZ_CLIENT_ID:
        required: true
      WIZ_CLIENT_SECRET:
        required: true
      AWS_ROLE_ARN:
        required: true
      ECR_REPOSITORY:
        required: true
      ECR_REGISTRY:
        required: true
jobs:
  build_and_push_docker_image:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      ECR_IMAGE_URI: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ inputs.image_tag }}
      DOCKERFILE_DIRECTORY: ${{ inputs.dockerfile_directory }}
    steps:
      - name: Setup AWS
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5.1.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 #v2.0.1

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Install Wiz CLI
        run: |
          curl -o wizcli https://wizcli.app.wiz.io/wizcli
          chmod +x wizcli

      - name: Authenticate to Wiz API
        env:
          WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}
        run: |
          ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"

      - name: Scan Dockerfile with Wiz CLI
        env:
          DOCKERFILE_DIRECTORY: ${{ inputs.dockerfile_directory }}
        run: |
          ./wizcli iac scan --path $DOCKERFILE_DIRECTORY --name $ECR_IMAGE_URI

      - name: Sanitize context path
        id: context
        env:
          DOCKERFILE_DIR: ${{ toJSON(inputs.dockerfile_directory) }}
        run: |
          CLEAN_PATH=$(echo "$DOCKERFILE_DIR" | sed 's/^"//;s/"$//')
          echo "path=$CLEAN_PATH" >> $GITHUB_OUTPUT

      - name: Build and tag Docker image (with build cache)
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          push: false
          load: true
          context: ${{ steps.context.outputs.path }}
          tags: ${{ env.ECR_IMAGE_URI }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Wiz Docker Scan
        run: |
          ./wizcli docker scan --image $ECR_IMAGE_URI

      - name: Push docker image to Amazon ECR
        run: |
          docker push $ECR_IMAGE_URI

      - name: Wiz Docker Tag
        run: |
          ./wizcli docker tag --image $ECR_IMAGE_URI

      - name: Update Lambda code
        env:
          LAMBDA_FUNCTION_NAME: ${{ inputs.lambda_function_name }}
        run: |
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri $ECR_IMAGE_URI
