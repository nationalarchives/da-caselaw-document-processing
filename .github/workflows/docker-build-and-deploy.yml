name: Build, Deploy, and Trigger Terraform Apply
on:
  push:
    branches:
      - main
      - docker-build-and-deploy
    tags:
      - "v*"
    paths:
      - "lambda_strip_docx/**"
      - ".github/workflows/docker-build-and-deploy.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to build and deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
jobs:
  build-deploy:
    environment: ${{ github.event.inputs.environment || 'staging' }}
    name: Build, Push, and Deploy Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      actions: read
      pull-requests: read
    outputs:
      image_tag: ${{ steps.set_env.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Setup AWS
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5.1.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 #v2.0.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Install Wiz CLI
        run: |
          curl -o wizcli https://wizcli.app.wiz.io/wizcli
          chmod +x wizcli

      - name: Authenticate to Wiz API
        env:
          WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}
        run: |
          ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"

      - name: Scan Dockerfile with Wiz CLI
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.set_env.outputs.image_tag }}
        run: |
          ./wizcli iac scan --path lambda_strip_docx --name "$ECR_REPOSITORY-$IMAGE_TAG"

      - name: Set environment variables
        id: set_env
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          # By default, environment is staging unless explicitly set by user in workflow_dispatch.
          if [ -z "$ENVIRONMENT" ]; then
            ENVIRONMENT="staging"
          fi

          # For production, require a tag and use the tag name as IMAGE_TAG
          if [ "$ENVIRONMENT" = "production" ]; then
            if [[ "$GITHUB_REF" != refs/tags/v* ]]; then
              echo "Error: Production deploys must use a GitHub release tag (refs/tags/v*) as the reference."
              exit 1
            fi
            IMAGE_TAG="$GITHUB_REF_NAME"
          else
            IMAGE_TAG="$GITHUB_SHA"
          fi

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Build and tag Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.set_env.outputs.image_tag }}
        run: |
          if [ -z "$ECR_REGISTRY" ] || [ -z "$ECR_REPOSITORY" ]; then
            echo "ECR_REGISTRY or ECR_REPOSITORY is not set. Aborting build."
            exit 1
          fi
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG lambda_strip_docx/

      - name: Wiz Docker Scan
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.set_env.outputs.image_tag }}
        run: |
          ./wizcli docker scan --image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Push docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.set_env.outputs.image_tag }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Wiz Docker Tag
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.set_env.outputs.image_tag }}
        run: |
          ./wizcli docker tag --image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  update-lambda:
    name: Update lambda via Terraform
    needs: build-deploy
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/terraform-plan-and-apply.yml
    with:
      environment: ${{ github.event.inputs.environment }}
      apply: "true"
      ECR_IMAGE_TAG: ${{ needs.build-deploy.outputs.image_tag }}
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      TF_VAR_caselaw_vpc_id: ${{ secrets.TF_VAR_caselaw_vpc_id }}
      TF_VAR_unpublished_assets_bucket_name: ${{ secrets.TF_VAR_unpublished_assets_bucket_name }}
      TF_VAR_unpublished_assets_kms_key_arn: ${{ secrets.TF_VAR_unpublished_assets_kms_key_arn }}
      TF_VAR_s3_prefix_list_id: ${{ secrets.TF_VAR_s3_prefix_list_id }}
      TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
